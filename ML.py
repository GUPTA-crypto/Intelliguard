# -*- coding: utf-8 -*-
"""ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rrSIm9k_2hnp4U6lRYk5v1yh9QpKNnOp
"""

import numpy as np
import pandas as pd

# Set a random seed for reproducibility
np.random.seed(42)

# Define the number of samples
num_samples = 5000

# Generate synthetic data for spoofing and DoS detection
spoofing_features = np.random.normal(loc=5, scale=2, size=(num_samples, 5))
dos_features = np.random.normal(loc=8, scale=3, size=(num_samples, 5))

# Create labels (0 for normal, 1 for attack)
spoofing_labels = np.zeros(num_samples)
dos_labels = np.ones(num_samples)

# Combine the data
features = np.vstack((spoofing_features, dos_features))
labels = np.concatenate((spoofing_labels, dos_labels))

# Shuffle the data
shuffle_index = np.random.permutation(len(features))
features, labels = features[shuffle_index], labels[shuffle_index]

# Create a DataFrame
columns = [f'Feature_{i}' for i in range(1, 6)]
df = pd.DataFrame(data=features, columns=columns)
df['Label'] = labels.astype(int)

# Save the DataFrame to a CSV file
df.to_csv('spoofing_dos_dataset.csv', index=False)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix
import pickle

# Load the dataset
df = pd.read_csv('spoofing_dos_dataset.csv')

# Separate features and labels
X = df.drop('Label', axis=1)
y = df['Label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

# Print the evaluation metrics
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("Confusion Matrix:")
print(conf_matrix)
print("\n")

# Save the dataset to a CSV file
df.to_csv('spoofing_dos_dataset_with_predictions.csv', index=False)

# Save the trained model using pickle
with open('trained_model.pkl', 'wb') as model_file:
    pickle.dump(model, model_file)

new_data = pd.read_csv('spoofing_dos_dataset_with_predictions.csv')
# Assuming 'X_new' is the feature matrix in the new dataset
X_new = new_data.drop('Label', axis=1)

# Load the trained model
with open('trained_model.pkl', 'rb') as model_file:
    model = pickle.load(model_file)

# Make predictions on the new data
y_scores = model.decision_function(X_new)

optimal_threshold = -0.16

# Classify instances into spoofing or DoS based on the optimal threshold
spoofing_predictions = (y_scores >= optimal_threshold).astype(int)
dos_predictions = (y_scores < optimal_threshold).astype(int)

# Print the optimal threshold
print(f'Optimal Threshold: {optimal_threshold:.2f}')

print("\n")

# Use 'spoofing_predictions' and 'dos_predictions' for further analysis or reporting

accuracy_spoofing = accuracy_score(new_data['Label'], spoofing_predictions)
precision_spoofing = precision_score(new_data['Label'], spoofing_predictions)
recall_spoofing = recall_score(new_data['Label'], spoofing_predictions)
conf_matrix_spoofing = confusion_matrix(new_data['Label'], spoofing_predictions)

# Calculate classification metrics for DoS
accuracy_dos = accuracy_score(new_data['Label'], dos_predictions)
precision_dos = precision_score(new_data['Label'], dos_predictions)
recall_dos = recall_score(new_data['Label'], dos_predictions)
conf_matrix_dos = confusion_matrix(new_data['Label'], dos_predictions)

# Print or use the evaluation metrics for the new data (if actual labels are available)
print("Spoofing Classification Metrics:")
print("Accuracy:", accuracy_spoofing)
print("Precision:", precision_spoofing)
print("Recall:", recall_spoofing)
print("Confusion Matrix:")
print(conf_matrix_spoofing)
print("\n")


print("DoS Classification Metrics:")
print("Accuracy:", accuracy_dos)
print("Precision:", precision_dos)
print("Recall:", recall_dos)
print("Confusion Matrix:")
print(conf_matrix_dos)